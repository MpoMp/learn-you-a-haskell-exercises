MpoMp's Haskell learning cheatsheet

___________
Operators
___________
+ - * /
&& || not
< > <= >= == /=
-- 
{-
 -
 -}
___________




Modules
___________
:m + Data.List
import Data.List Data.Map

import Data.List (nub, sort)        (only)
import Data.List hiding (nub)       (all but)

import qualified Data.Map  
This makes it so that if we want to reference Data.Map's filter function, we have to do Data.Map.filter, whereas just filter still refers to the normal filter we all know and love. 

But typing out Data.Map in front of every function from that module is kind of tedious. That's why we can rename the qualified import to something shorter:
import qualified Data.Map as Map

Data.List
--intersperse             (takes an element and a list and then puts that element in between each pair of elements in the list)
--intercalate             (takes a list of lists and a list. It then inserts that list in between all those lists and then flattens the result.
--transpose
--foldl' and foldl1'        (are stricter versions of fold, memory-friendly)
--concat
--concatMap 
--and, or                   (boolean lists)
--any,all                   (predicate and list)
--iterate                   (takes a function and a starting value. It applies the function to the starting value infinitely)
--splitAt                   (returns tuple with sublists)
--takeWhile, dropWhile
--span,break                (like takeWhile, returns two lists in tuple)
--sort,group
--inits,tails               (recursively applied tail and init)
--isInfixOf,isPrefixOf,isSuffixOf
--elem,notElem
--partition                 (splits lists based on predicate)
--find                      (takes a list and a predicate and returns the first element that satisfies the predicate wrapped in a Maybe value)
--elemIndex,elemIndices     (return Maybe and a list respectively)
--findIndex,findIndices
--zip2,zipWith2             (up to 7)
--lines,unlines             (split/concat strings at/with \n)
--words,unwords             (split/concat strings at/with spaces)
--nub                       (remove duplicates)
--delete                    (deletes first occurence of element)
--\\                        (set difference)
--union,intersect           (sets)
--insert                    (takes an element and a list of elements that can be sorted and inserts it into the last position where it's still less than or equal to the next element
--genericLength, genericTake, genericDrop, genericSplitAt, genericIndex, genericReplicate
--sortBy, insertBy, maximumBy, minimumBy
--nubBy, deleteBy, unionBy, intersectBy and groupBy     (use a custom equality function)
--on                        (==) `on` (> 0) returns an equality function that looks like \x y -> (x > 0) == (y > 0)

When you're dealing with By functions that take an equality function, you usually do (==) `on` something and when you're dealing with By functions that take an ordering function, you usually do compare `on` something

Data.Char

Data.Map
fromList, toList
empty, insert k v m, null,size, singleton k v, lookup k, member k m 
keys, elems
fromListWith,insertWith        (uses given function to deal with key duplicates)

Data.Set


___________



Functions
___________
succ n, min a b, max a b

a `div/quot` b, a `mod/rem` b   (‘quot‘ is integer division truncated toward zero, while the result of ‘div‘ is truncated toward negative infinity. The div function is often the more natural one to use, whereas the quot function corresponds to the machine instruction on modern machines, so it's somewhat more efficient)

a `compare` b                   (returns Ordering)
show a                          (a must be Show, returns string)

--If a function is comprised only of special characters, it's considered an infix function by --default. If we want to examine its type, pass it to another function or call it as a prefix --function, we have to surround it in parentheses.

fromIntegral                (fromIntegral :: (Num b, Integral a) => a -> b)

--Pattern is checked top to bottom.
lucky :: (Integral a) => a -> String  
lucky 7 = "LUCKY NUMBER SEVEN!"  
lucky x = "Sorry, you're out of luck, pal!" 

charName :: Char -> String 
charName 'a' = "Albert"
charName x = "???"

addVectors :: (Num a) => (a, a) -> (a, a) -> (a, a)  
addVectors (x1, y1) (x2, y2) = (x1 + x2, y1 + y2) 

-- as pattern
capital :: String -> String  
capital "" = "Empty string, whoops!"  
capital all@(x:xs) = "The first letter of " ++ all ++ " is " ++ [x] 


Lambdas are basically anonymous functions that are used because we need some functions only once.
numLongChains :: Int  
numLongChains = length (filter (\xs -> length xs > 15) (map chain [1..100]))

takeWhile function. 
It takes a predicate and a list and then goes from the beginning of the list and returns its elements while the predicate holds true. Once an element is found for which the predicate doesn't hold, it stops.

A fold takes a binary function, a starting value and a list to fold up.
    sum' :: (Num a) => [a] -> a  
    sum' xs = foldl (\acc x -> acc + x) 0 xs  
    
Folds can be used to implement any function where you traverse a list once, element by element, and then return something based on that. 
Whenever you want to traverse a list to return something, chances are you want a fold. 
That's why folds are, along with maps and filters, one of the most useful types of functions in functional programming.
    
Generally, if you have a function like foo a = bar b a, you can rewrite it as foo = bar b, because of currying.

The right fold, foldr works in a similar way to the left fold, only the accumulator eats up the values from the right. 
Also, the left fold's binary function has the accumulator as the first parameter and the current value as the second one (so \acc x -> ...), 
the right fold's binary function has the current value as the first parameter and the accumulator as the second one (so \x acc -> ...). 
Obviously right folds work on infinite lists, whereas left ones don't!

The foldl1 and foldr1 functions assume the first (or last) element of the list to be the starting value and then start the fold with the element next to it.

scanl and scanr are like foldl and foldr, only they report all the intermediate accumulator states in the form of a list. 

$ function, also called function application
sqrt (3 + 4 + 9) or if we use $ we can write it as sqrt $ 3 + 4 + 9 because $ has the lowest precedence of any operator
But apart from getting rid of parentheses, $ means that function application can be treated just like another function. That way, we can, for instance, map function application over a list of functions.
    ghci> map ($ 3) [(4+), (10*), (^2), sqrt]  
    [7.0,30.0,9.0,1.7320508075688772] 

    ______________

Function composition (right associative)
f . g = \x -> f (g x)

sum . replicate 5 . max 6.7 $ 8.9 -- this is right associative, equals the line below
--sum (replicate 5 (max 6.7 8.9))

-- fn x = ceiling (negate (tan (cos (max 50 x))))  
fn = ceiling . negate . tan . cos . max 50  
    
___________


Flow control
___________
if x > 100 then x else x*2   
    
--Guards
bmiTell :: (RealFloat a) => a -> String  
bmiTell bmi  
   | bmi <= 18.5 = "You're underweight, you emo, you!"  
   | bmi <= 25.0 = "You're supposedly normal. Pffft, I bet you're ugly!"  
   | bmi <= 30.0 = "You're fat! Lose some weight, fatty!"  
   | otherwise   = "You're a whale, congratulations!" 

let bindings are expressions themselves. 
where bindings are just syntactic constructs. 

    case expression of pattern -> result  
                       pattern -> result  
                       pattern -> result  
                       ...  

                       
___________


Lists
___________
++                  (concatenation)
:                   (append element)
list !! 1           (get list[1])
minimum, maximum
sum, product
concat [l1,l2]      (flattens list of lists)
< > <= >= == /=     (element-wise comparison)
head                (returns first element)
tail                (returns all but head)
last                (returns last element)
init                (returns all but last)
length
null                (checks if empty)
reverse
take x list         (take x elements from the start)
drop x list         (remove x elements from the start)
x `div` list        (check if list contains x)

cycle list                      (infinite list out of list)
repeat x                        (infinite list out of element)
take x(cycle list) 
take x(repeat a)

length' xs = sum [1 | _ <- xs]  ('_' is kind of a wildcard)

Filtering examples
[x*2 | x <- [1..10]]
[x*2 | x <- [1..10], x*2 >= 12] 
[ if x < 10 then "BOOM!" else "BANG!" | x <- xs, odd x]  
[ x*y | x <- [2,5,10], y <- [8,10,11], x*y > 50] 
[ [ x | x <- xs, even x ] | xs <- xxs
___________


Ranges
___________
[1..20]
[1,2..20]
[5,10..100]
___________


Tuples
___________
[(1,2),("One",2)]
fst t, snd t                (first and second element)
zip l1 l2                   (element-wise tuple generator, returns tuples in list)
___________


Types
___________
:t x                (shows type of variable/function x)
x :: T              (x has type of T, type annotation)

Int                 (bounded, efficient)
Integer             (not bounded)
Float               (single precision)
Double              (double precision)
Bool
Char
String              (not actual type, is [Char])

Ordering            (can be GT, LT or EQ)

If no type is specified, then a type variable is given. 
Functions using these, are called polymorphic.

removeNonUppercase :: [Char] -> [Char]              (input type -> output type)
removeNonUppercase :: String -> String
removeNonUppercase st = [ c | c <- st, c `elem` ['A'..'Z']]

addThree :: Int -> Int -> Int -> Int                (last arg is return type)
addThree x y z = x + y + z    
___________

Typeclasses
___________
Everything before the => symbol is called a class constraint
The elem function has a type of (Eq a) => a -> [a] -> Bool because it uses == over a list to check whether some value we're looking for is in it.

Eq              (members implement == and /=)
Ord             (members implement all the standard comparing functions such as >, <, >= and <=)
Show            (members can be presented as strings)
Read            (opposite of Show)
Enum            (members are sequentially ordered types)
Bounded         (members have an upper and a lower bound - minBound and maxBound functions, all tuples are part of Bounded if the components are also in it - e.g. maxBound :: (Bool, Int, Char) )

Num
Integral
Floating

RandomGen is for types that can act as sources of randomness 
Random is for things that can take on random values

However, it's a very strong convention in Haskell to never add typeclass constraints in data declarations. Why? Well, because we don't benefit a lot, but we end up writing more class constraints, even when we don't need them

Type parameters
Without
    data Car = Car { company :: String  
                   , model :: String  
                   , year :: Int  
                   } deriving (Show)  

With
    data Car a b c = Car { company :: a  
                         , model :: b  
                         , year :: c   
                         } deriving (Show) 
                         

data List a = Empty | Cons { listHead :: a, listTail :: List a} deriving (Show, Read, Eq, Ord) 


data defines new types (possibly deriving from typeclasses)
type defines type synonyms
class is for defining new typeclasses
instance is for making our types instances of any typeclasses


___________


I/O
___________
    import Data.Char  
      
    main = do  
        putStrLn "What's your first name?"  
        firstName <- getLine  
        putStrLn "What's your last name?"  
        lastName <- getLine  
        let bigFirstName = map toUpper firstName  
            bigLastName = map toUpper lastName  
        putStrLn $ "hey " ++ bigFirstName ++ " " ++ bigLastName ++ ", how are you?"  
        

        
All these returns do is that they make I/O actions that don't really do anything except have an encapsulated result and that result is thrown away because it isn't bound to a name

Because mapping a function that returns an I/O action over a list and then sequencing it is so common, the utility functions mapM and mapM_ were introduced. 
mapM takes a function and a list, maps the function over the list and then sequences it. 
mapM_ does the same, only it throws away the result later.

interact takes a function of type String -> String as a parameter and returns an I/O action that will take some input, run that function on it and then print out the function's result



___________


Bytestrings
___________
Strict bytestrings reside in Data.ByteString and they do away with the laziness completely. There are no promises involved; a strict bytestring represents a series of bytes in an array. You can't have things like infinite strict bytestrings. If you evaluate the first byte of a strict bytestring, you have to evaluate it whole. The upside is that there's less overhead because there are no thunks (the technical term for promise) involved. The downside is that they're likely to fill your memory up faster because they're read into memory at once.

The other variety of bytestrings resides in Data.ByteString.Lazy. They're lazy, but not quite as lazy as lists. Like we said before, there are as many thunks in a list as there are elements. That's what makes them kind of slow for some purposes. Lazy bytestrings take a different approach — they are stored in chunks (not to be confused with thunks!), each chunk has a size of 64K. So if you evaluate a byte in a lazy bytestring (by printing it or something), the first 64K will be evaluated. After that, it's just a promise for the rest of the chunks. Lazy bytestrings are kind of like lists of strict bytestrings with a size of 64K. When you process a file with lazy bytestrings, it will be read chunk by chunk. This is cool because it won't cause the memory usage to skyrocket and the 64K probably fits neatly into your CPU's L2 cache.

Whenever you need better performance in a program that reads a lot of data into strings, give bytestrings a try, chances are you'll get some good performance boosts with very little effort on your part. I usually write programs by using normal strings and then convert them to use bytestrings if the performance is not satisfactory.



___________


Exceptions
___________
import System.Environment  
import System.IO  
import System.IO.Error  
  
main = toTry `catch` handler  
              
toTry :: IO ()  
toTry = do (fileName:_) <- getArgs  
           contents <- readFile fileName  
           putStrLn $ "The file has " ++ show (length (lines contents)) ++ " lines!"  
  
handler :: IOError -> IO ()  
handler e = putStrLn "Whoops, had some trouble!" 